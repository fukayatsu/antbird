#!/usr/bin/env bundle exec ruby

require 'octokit'
require 'base64'
require 'json'
require 'yaml'
require 'erb'

class ApiMethodsGenerator
  def initialize(engine_name, rest_api_spec_repo, version)
    @engine_name = engine_name
    @rest_api_spec_repo = rest_api_spec_repo
    @version = version

    sliced = @version.split(".").slice(0,2)
    @short_version = sliced.join(".")
    @class_version = sliced.join("_")
  end
  attr_reader :engine_name, :rest_api_spec_repo, :version, :short_version, :class_version

  def run
    api_spec = fetch_api_spec(engine_name, "#{version_tag_previx}#{version}")
    File.open("lib/antbird/rest_api/rest_api_#{engine_name_prefix}v#{class_version}.rb", "w") do |f|
      f.puts ERB.new(File.read('script/rest_api_template.erb'), trim_mode: "<>").result(binding)
    end
  end

  private

  def fetch_api_spec(engine_name, ref)
    cache_file = "tmp/api_spec_#{engine_name_prefix}#{ref}.yml"
    return YAML.load_file(cache_file) if File.exist?(cache_file)

    client = Octokit::Client.new(access_token: ENV['GITHUB_TOKEN'])
    files = client.contents(rest_api_spec_repo, path: 'rest-api-spec/src/main/resources/rest-api-spec/api', query: {ref: ref})
    api_spec = {}
    files.each do |f|
      puts f.url
      file = client.content(rest_api_spec_repo, path: f.path, query: { ref: ref })
      api_spec[File.basename(file.name)] = JSON.parse(Base64.decode64(file.content))
    end

    File.open(cache_file, 'w') { |f| f.write(api_spec.to_yaml) }
    api_spec
  end

  def engine_name_prefix
    engine_name == 'elasticsearch' ? '' : "#{engine_name}_"
  end

  def version_tag_previx
    engine_name == 'elasticsearch' ? 'v' : ""
  end
end

%w[
  .github/workflows/build.yml
  .github/workflows/build-os.yml
].each do |workflow_file|
  workflow_yaml = YAML.load_file(workflow_file)
  engine_name = workflow_yaml.dig('env', 'ENGINE_NAME')
  rest_api_spec_repo = workflow_yaml.dig('env', 'REST_API_SPEC_REPO')
  versions = workflow_yaml.dig('jobs', 'build', 'strategy', 'matrix', 'search_versions').uniq

  versions.each do |version|
    ApiMethodsGenerator.new(engine_name, rest_api_spec_repo, version).run
  end
end
